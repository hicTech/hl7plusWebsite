@import "flexScaffolding";

/*
            _                 _
   _____  _| |_ ___ _ __   __| | ___ _ __
  / _ \ \/ / __/ _ \ '_ \ / _` |/ _ \ '__|
 |  __/>  <| ||  __/ | | | (_| |  __/ |
  \___/_/\_\\__\___|_| |_|\__,_|\___|_|

-------------------------- .extender() or .ex() --------------------------

  css class to create an .EXTENDER

  --------------------------------------------------------------------
*/

.extender,
 .ex{
   .EXTENDER();
 }

.padder(@v:10px){
  position: absolute;
  top: @v;
  left: @v;
  bottom: @v;
  right: @v;
}

.padder-center{
  .PADDER-CENTER();
}

.scrollable(){
  .SCROLLABLE();
}

/*
            _
   ___ ___ | |___
  / __/ _ \| / __|
 | (_| (_) | \__ \
  \___\___/|_|___/

-------------------------- .cols() --------------------------

  css class to create a .COLS

  example:
  .your_css_class{
    .cols();
  }

  accepts a parameter (@v) to specify justifications
  @v : reverse | jus-center | jus-end | jus-around | jus-between

  --------------------------------------------------------------------
*/

.cols(){
  .COLS();
}

.cols(@v) when (@v = reverse){
  .COLS();
  .COLS.REVERSE();
}

.cols(@v) when (@v = jus-center){
  .COLS();
  .COLS.JUS-CENTER();
}

.cols(@v) when (@v = jus-end){
  .COLS();
  .COLS.JUS-END();
}

.cols(@v) when (@v = jus-around){
  .COLS();
  .COLS.JUS-AROUND();
}

.cols(@v) when (@v = jus-between){
  .COLS();
  .COLS.JUS-BETWEEN();
}






/*

  _ __ _____      _____
 | '__/ _ \ \ /\ / / __|
 | | | (_) \ V  V /\__ \
 |_|  \___/ \_/\_/ |___/

-------------------------- .rows() --------------------------

  css class to create a .ROWS

  example:
  .your_css_class{
    .rows();
  }

  accepts a parameter (@v) to specify justifications
  @v : reverse | jus-center | jus-end | jus-around | jus-between

  --------------------------------------------------------------------
*/



.rows(){
  .ROWS();
}


.rows(@v) when (@v = reverse){
  .ROWS();
  .ROWS.REVERSE();
}

.rows(@v) when (@v = jus-center){
  .ROWS();
  .ROWS.JUS-CENTER();
}

.rows(@v) when (@v = jus-end){
  .ROWS();
  .ROWS.JUS-END();
}

.rows(@v) when (@v = jus-around){
  .ROWS();
  .ROWS.JUS-AROUND();
}

.rows(@v) when (@v = jus-between){
  .ROWS();
  .ROWS.JUS-BETWEEN();
}








/*
           _ _
   ___ ___| | |
  / __/ _ \ | |
 | (_|  __/ | |
  \___\___|_|_|

-------------------------- .cell() --------------------------

    css class to create a .CELL

    for flexible one:
    .your_css_class{
      .flex();
    }

    for static one:
    .your_css_class{
      .cell();
    }

    accepts a parameter (@v) to specify alignment
    @v : auto | start | end | center | stretch | baseline

    in addition you can use .w() or .h() to set with or height of the cell.


    .your_css_class_container{
      .rows();

        .your_css_class_item_1{
          .cell();
          .h(200px);
        }

    }

    .your_css_class_container{
      .cols();

        .your_css_class_item_1{
          .cell();
          .w(200px);
        }

    }

    .h() and .w() accept 2 parameters:
    - the first value regards the main-axis metrics so height for .h() and width for .w()
    - the second parameter (optional) instead regards cross-axis metrics.
      if set this parameter enables cross axis metrics ,by passing a parameter in .cell(), so you can white


    .your_css_class_container{
    .cols();

      .your_css_class_item_1{
        .cell(center);
        .w(200px,50px);
      }

    }




  --------------------------------------------------------------------
*/



.cell(){
  .CELL();
}

.cell(@v) when (@v = auto){
  .CELL();
  .CELL.AUTO();
}

.cell(@v) when (@v = start){
  .CELL();
  .CELL.START();
}

.cell(@v) when (@v = end){
  .CELL();
  .CELL.END();
}

.cell(@v) when (@v = center){
  .CELL();
  .CELL.CENTER();
}

.cell(@v) when (@v = stretch){
  .CELL();
  .CELL.STRETCH();
}

.cell(@v) when (@v = baseline){
  .CELL();
  .CELL.BASELINE();
}


.flex{
  .CELL();
  .CELL._FLEX();
}







.w(@w,@a:100%){
  width: @w;
  height: @a;
}

.h(@h,@a:100%){
  height: @h;
  width: @a;
}



