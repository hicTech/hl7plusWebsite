/*!   flex_layout-0.2  */

/*
  _______  _______ _____ _   _ ____  _____ ____
 | ____\ \/ /_   _| ____| \ | |  _ \| ____|  _ \
 |  _|  \  /  | | |  _| |  \| | | | |  _| | |_) |
 | |___ /  \  | | | |___| |\  | |_| | |___|  _ <
 |_____/_/\_\ |_| |_____|_| \_|____/|_____|_| \_\

  -------------------------- root container --------------------------
                            .EXTENDER .EX(alias)

  Provides a container that fits all the available space and lets
  .ROWS/.COLS to stretch and fill the available height/width

  --------------------------------------------------------------------
*/
.EXTENDER, .EX {
  position: absolute;
  top: 0px;




  left: 0px;
  right: 0px;
  bottom: 0px;
  width: 100%;
  height: 100%;
  overflow-y: hidden;
  overflow-x: hidden;
}









/*
  ____   _____        ______                    _    ____ ___  _     ____
 |  _ \ / _ \ \      / / ___|    __ _ _ __   __| |  / ___/ _ \| |   / ___|
 | |_) | | | \ \ /\ / /\___ \   / _` | '_ \ / _` | | |  | | | | |   \___ \
 |  _ <| |_| |\ V  V /  ___) | | (_| | | | | (_| | | |__| |_| | |___ ___) |
 |_| \_\\___/  \_/\_/  |____/   \__,_|_| |_|\__,_|  \____\___/|_____|____/

-------------------------- flex containers --------------------------
                            .ROWS .COLS

Define if we want to split the space (the father's space / .EXTENDER or .PADDER) by rows or columns.
Establishes the main-axis, thus defining the direction flex items are placed in the flex container

  .COLS
     - forces its children (.CELL) to be 100% height columns;
     - main-axis : horizontal
     - cross-axis: vertical

  .ROWS
    - forces its children (.CELL) to be 100% width rows
    - main-axis: vertical
    - cross-axis: horizontal

  .REVERSE [optional]
    - reverses the order of the children

--------------------------------------------------------------------
*/
.COLS{
  .flexContainersCommons();
}

.COLS.REVERSE{
  .flexDirection(row-reverse);
}



.ROWS{
  .flexContainersCommons(column, vertical);
}

.ROWS.REVERSE{
  .flexDirection(column-reverse);
}


.flexContainersCommons(@direction:row, @old_safari_legacy:horizontal) {
  width: 100%;
  height: 100%;
  .displayFlex();
  .flexDirection(@direction, @old_safari_legacy);
  .justifyContent(); /* main-axis */
  .flexAlign(); /* cross-axis */
}



.containerNoFlex(@direction:row, @old_safari_legacy:horizontal) {
  width: 100%;
  height: 100%;
  /* displayFlex() overwrite*/
  display: inline;

  /* flexDirection overwrite*/
  -webkit-box-orient:horizontal;
  -webkit-box-direction:normal;
  -webkit-flex-direction:row;
  -ms-flex-direction:row;
  flex-direction:row;

  /* justifyContent overwrite*/
  -webkit-box-pack:start;
  -webkit-justify-content:start;
  -ms-flex-pack:start;
  justify-content:start;

  /* flexAlign */
  -webkit-box-align:start;
  -webkit-align-items:start;
  -ms-flex-align:start;
  align-items:start;

}








/*

      _ _   _ ____ _____ ___ _______   __
     | | | | / ___|_   _|_ _|  ___\ \ / /
  _  | | | | \___ \ | |  | || |_   \ V /
 | |_| | |_| |___) || |  | ||  _|   | |
  \___/ \___/|____/ |_| |___|_|     |_|


-------------------------- main-axis properties --------------------------
                .JUS-CENTER .JUS-END .JUS-AROUND .JUS-BETWEEN

These properties manipulates the main-axis disposition of the children.
They can be applied only to ROWS and COLS.
JUS- stands for justify and they work only if ROWS and COLS doesn't contains flex children.
In Fact, a flexible child will take all the available space (the space
leave free from its siblings) and they would be justified

  .JUS-CENTER: children will be centered without margin between them

  .JUS-END: children will be right|bottom aligned without margin between them

  .JUS-START: (default) children will be left|top aligned and without margin between them

  .JUS-BETWEEN: The space is divided evenly in-between each child, with none of the extra
                space placed before the first child or after the last child

  .JUS-AROUND:  same behavior of .JUS-BETWEEN but the margin of the last and the first child
                will be half the margin between the various children


--------------------------------------------------------------------
*/
.ROWS.JUS-CENTER,
.COLS.JUS-CENTER{
  .justifyContent(center, center);
}

.ROWS.JUS-END,
.COLS.JUS-END{
  .justifyContent(flex-end, end);
}

.ROWS.JUS-AROUND{
  /* partial supported: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 5.1+ */
  .justifyContent(space-around, distribute);

}

.COLS.JUS-AROUND{
  /* partial supported: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 5.1+ */
  .justifyContent(space-around, distribute);

}

.ROWS.JUS-BETWEEN{
  /* partial support:  FF 22+ */
  .justifyContent(space-between, justify);
}

.COLS.JUS-BETWEEN{
  /* partial support:  FF 22+ */
  .justifyContent(space-between, justify);
}









/*
     _    _     ___ ____ _   _
    / \  | |   |_ _/ ___| \ | |
   / _ \ | |    | | |  _|  \| |
  / ___ \| |___ | | |_| | |\  |
 /_/   \_\_____|___\____|_| \_|


-------------------------- cross-axis properties --------------------------
                      .CENTER .END .STRETCH .BASELINE

These properties manipulates the cross-axis disposition of ALL the children by
align-items property. By default is .STRETCH so children fill all the cross-axis
available space (height for .COLS and width for .ROWS)

--------------------------------------------------------------------
*/
.ROWS.END,
.COLS.END{
  /* partial support: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 4.4+  */
  .flexAlign(flex-end, end);
}

.ROWS.CENTER,
.COLS.CENTER{
  /* partial support: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 4.4+  */
  -webkit-box-align:center;
  -webkit-align-items:center;
  -ms-flex-align:center;
  align-items:center
}

.ROWS.STRETCH,
.COLS.STRETCH{
  /* partial support: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 4.4+  */
  .flexAlign();
}

.ROWS.BASELINE,
.COLS.BASELINE{
  /* partial support: IE 10+, safari 6.1+, FF 22+, GC 21+, Opera 12.12+, iOs 7+, Android 4.4+  */
  .flexAlign(baseline, baseline);
}


/*-------------------------- browsers abbreviations */
.displayFlex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

.flexDirection(@direction:row,@old-legacy:horizontal) {
  -webkit-flex-direction: @direction;
  -ms-flex-direction: @direction;
  flex-direction: @direction;
  -webkit-box-orient: @old-legacy;
  -moz-box-orient: @old-legacy;
}

.justifyContent(@justify:flex-start, @old-legacy:start) {
  -webkit-justify-content: @justify;
  -ms-flex-pack: @old-legacy;
  justify-content: @justify;
  -webkit-box-pack: @old-legacy;
}

.flexAlign(@align:stretch, @old-legacy:stretch) {
  -webkit-align:@align;
  -ms-flex-align: @align;
  -webkit-box-align: @align;
  align-items: @old-legacy;
}











/*
   ____ _____ _     _
  / ___| ____| |   | |
 | |   |  _| | |   | |
 | |___| |___| |___| |___
  \____|_____|_____|_____|

--------------- flexible or static items (children) ---------------
                          .CELL ._FLEX

These are the children inside a flexible container. We call .CELL cause
they can be vertical or horizontal elements depending on their direct father.

If father is .COLS
  - main-axis: horizontal, cross-axis: vertical;
  - .CELL will be 100% height columns and the width depends on their content;
  - .CELL ._FLEX will be 100% height columns and the width grows to fill all the available (horizontal) space;
  - .CELL ._150px will be 100% height column with width 150px;
  - .CELL ._50pct will be 100% height column with width 50%.

If father is .ROWS
  - main-axis: vertical, cross-axis: horizontal;
  - .CELL will be 100% width rows and the height depends on their content;
  - .CELL ._FLEX will be 100% width rows and the height grows to fill all the available (vertical) space;
  - .CELL ._150px will be 100% width row with height 150px;
  - .CELL ._50pct will be 100% width row with height 50%.


--------------------------------------------------------------------
*/

.CELL{
  position: relative;
  overflow: hidden;
  .cellNoFlex();
  .selfAlign();
}

.CELL._FLEX{ .flex(1) }
.CELL._FLEX1{ .flex(1) }
.CELL._FLEX2{ .flex(2) }
.CELL._FLEX3{ .flex(3) }
.CELL._FLEX4{ .flex(4) }
.CELL._FLEX5{ .flex(5) }



.CELL._ORD0{ .flexOrder(0) }
.CELL._ORD1{ .flexOrder(1) }
.CELL._ORD2{ .flexOrder(2) }
.CELL._ORD3{ .flexOrder(3) }
.CELL._ORD4{ .flexOrder(4) }
.CELL._ORD5{ .flexOrder(5) }



/*

   ____ _____ _     _          _    _     ___ ____ _   _
  / ___| ____| |   | |        / \  | |   |_ _/ ___| \ | |
 | |   |  _| | |   | |       / _ \ | |    | | |  _|  \| |
 | |___| |___| |___| |___   / ___ \| |___ | | |_| | |\  |
  \____|_____|_____|_____| /_/   \_\_____|___\____|_| \_|


-------------------------- cross-axis properties --------------------------
                    .CENTER .END .STRETCH .BASELINE

.CELL are .AUTO by default so inherit father's cross-axis align
(by default . STRETCH) so .CELL are .STRETCH by default. With these
properties we can set a different align to a specific .CELL

--------------------------------------------------------------------
*/


.CELL.AUTO {
  .selfAlign();
}

.CELL.START {
  .selfAlign(flex-start, start);
}

.CELL.END {
  .selfAlign(flex-end, end);
}

.CELL.CENTER {
  .selfAlign(center, center);
}

.CELL.STRETCH {
  .selfAlign(stretch, stretch);
}

.CELL.BASELINE {
  .selfAlign(baseline, baseline);
}


.flexOrder(@order:0){
  -webkit-order: @order !important;
  -ms-flex-order: @order !important;
  order: @order !important;
}

.selfAlign(@align:auto, @old-legacy:auto){
  -webkit-align-self: @align;
  -ms-flex-item-align: @old-legacy;
  align-self: @align;
}



.cellNoFlex{
  -webkit-box-ordinal-group: none;
  -moz-box-ordinal-group: none;
  -webkit-order: 0;
  -ms-flex-order: 0;
  order: 0;
  -webkit-box-flex: none;
  -moz-box-flex: none;
  -webkit-flex: none;
  -ms-flex:none;
  flex: none;
  -webkit-align-self: auto;
  -ms-flex-item-align: auto;
  align-self: auto;
}

.flex(@v){
  /* Old Syntax */
  -webkit-box-flex: @v;
  -moz-box-flex: @v;
  /* New Syntax */
  -webkit-flex: @v;
  flex: @v;
  -ms-flex: @v;
  height: auto;
  width: auto;


}








/*

  ____   _    ____  ____  _____ ____  ____
 |  _ \ / \  |  _ \|  _ \| ____|  _ \/ ___|
 | |_) / _ \ | | | | | | |  _| | |_) \___ \
 |  __/ ___ \| |_| | |_| | |___|  _ < ___) |
 |_| /_/   \_\____/|____/|_____|_| \_\____/


-------------------------- padder --------------------------
                    .PADDER0, .PADDER5, .PADDER10,.....

Sets an uniform padding inside an .EXTENDER.
By default you can set a padding of 5, 10, 15, 25, 35, 45, 55 or centered
--------------------------------------------------------------------

*/




.PADDER-CENTER {
  width: 100%;
  height: 100%;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
}


.PADDER0 {
  position: absolute;
  top: 0px;
  left: 0px;
  bottom: 0px;
  right: 0px;
}

.PADDER,
.PADDER10 {
  position: absolute;
  top: 10px;
  left: 10px;
  bottom: 10px;
  right: 10px;
}

.PADDER5 {
  position: absolute;
  top: 5px;
  left: 5px;
  bottom: 5px;
  right: 5px;
}

.PADDER15 {
  position: absolute;
  top: 15px;
  left: 15px;
  bottom: 15px;
  right: 15px;
}

.PADDER25 {
  position: absolute;
  top: 25px;
  left: 25px;
  bottom: 25px;
  right: 25px;
}

.PADDER35 {
  position: absolute;
  top: 35px;
  left: 35px;
  bottom: 35px;
  right: 35px;
}

.PADDER45 {
  position: absolute;
  top: 45px;
  left: 45px;
  bottom: 45px;
  right: 45px;
}

.PADDER55 {
  position: absolute;
  top: 55px;
  left: 55px;
  bottom: 55px;
  right: 55px;
}






/*

  ____   ____ ____   ___  _     _        _    ____  _     _____
 / ___| / ___|  _ \ / _ \| |   | |      / \  | __ )| |   | ____|
 \___ \| |   | |_) | | | | |   | |     / _ \ |  _ \| |   |  _|
  ___) | |___|  _ <| |_| | |___| |___ / ___ \| |_) | |___| |___
 |____/ \____|_| \_\\___/|_____|_____/_/   \_\____/|_____|_____|


-------------------------- scrollable --------------------------
                    .SCROLLABLE

Sets a scrollable area with touch support
--------------------------------------------------------------------

*/

.SCROLLABLE{
  /* partial supported: iOs 5+ */
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  position: absolute;
  width: 100%;
  height: 100%;
}




